# Code taken from https://docs.timescale.com/timescaledb/latest/tutorials/aws-lambda/continuous-deployment/
# combined with https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
# with some additional modifications

# name: deploy to lambda
# on:
#   pull_request:
#     branches:
#       - master
#     types:
#       - closed

# jobs:
#   deploy_source:
#     if: github.event.pull_request.merged == true
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout source code
#         uses: actions/checkout@v1
#       - name: deploy get-package
#         uses: appleboy/lambda-action@master
#         with:
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_region: ${{ secrets.AWS_REGION }}
#           function_name: get-package
#           source: src/lambda_functions/get_package.py


# DELETE AND UNCOMMENT ABOVE AFTER GETTING TO WORK.
# CURRENTLY ON PUSH BUT ABOVE SHOULD CHANGE TO 
# ON MERGE WITH MASTER
name: deploy to lambda
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - Lambda-Functions
jobs:


  deploy_source:
    name: deploy lambda from source
    runs-on: ubuntu-latest
    steps:
      - name: checkout source code
        uses: actions/checkout@v1
      - name: deploy get-package
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: get-package
          source: src/lambda_functions/get_package.py
      # - name: deploy get-packages
      #   uses: appleboy/lambda-action@master
      #   with:
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws_region: ${{ secrets.AWS_REGION }}
      #     function_name: get-packages
      #     source: src/lambda_functions/get_packages.py
      - name: deploy get-package-by-name
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: get-package-by-name
          source: src/lambda_functions/get_package_by_name.py
      - name: deploy update-package
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: update-package
          source: src/lambda_functions/update_package.py
      - name: deploy upload-package
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: upload-package
          source: src/lambda_functions/upload_package.py
      - name: deploy delete-package
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: delete-package
          source: src/lambda_functions/delete_package.py
      - name: deploy delete-package-by-name
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: delete-package-by-name
          source: src/lambda_functions/delete_package_by_name.py
      - name: deploy reset
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: reset
          source: src/lambda_functions/reset.py